@use 'sass:math';

//@todo utilities: spacings, colors, 


$utilities: (
  
  "opacity": (
    "prefix": "o",
    "values": (
      "10": 0.1,
      "20": 0.2,
      "30": 0.3,
      "40": 0.4,
      "50": 0.5,
      "60": 0.6,
      "70": 0.7,
      "80": 0.8,
      "90": 0.9,
      "100": 1,
    ),
  ),
  "border-radius": (
    "prefix": "br",
    "values": (
      "default": $base-border-radius,
      "none": 0,
      "xs": math.div($base-border-radius, 4),
      "sm": math.div($base-border-radius, 2),
      "lg": $base-border-radius * 2,
      "full": 50%,
    )
  ),
  "display": (
    "prefix": "display",
    "values": (
      "n": none,
      "b": block,
      "f": flex,
      "i": inline,
      "i-b": inline-block
    )
  ),



  "align-items": (
    "prefix": "align",
    "values": (
      "f-start": flex-start,
      "f-end": flex-end,
      "center": center
    )
  ),

  "flex-direction": (
    "prefix": "flex",
    "values": (
      "row": row,
      "column": column,
    )
  ),

  "justify-content": (
    "prefix": "justify",
    "values": (
      "between": space-between,
      "f-end": flex-end,
      "center": center,
      "around": space-around,
      "evenly": space-evenly
    )
  ),

  "text-align": (
    "prefix": "text",
    "values": (
        "center" : center,
        "start" : start,
        "end" : end,
        "left" : left,
        "right" : right,
        "justify": justify,
        )
  ),

  "text-decoration": (
    "prefix": "text",
    "values": (
        "dashed" : dashed,
        "underline" : underline,
        "wavy" : wavy,
        "dotted" : dotted,
        "double" : double,
        "line-through": line-through,
        "solid": solid,
        "none": none,
        )
  ),

  "font-weight": (
    "prefix": "font",
    "values": (
        "b" : bold,
        "i" : italic,
        "n" : normal,
        "l" : lighter,
        "bolder" : bolder,
        )
  ),
  
  "font-size": (
    "prefix": "text",
    "values": (
        "d2xl" : $base-font-size * 7.2,
        "dxl" : $base-font-size * 6,
        "dlg" : $base-font-size * 4.8,
        "dmd" : $base-font-size * 3.6,
        "dsm" : $base-font-size * 3.2,
        "dxs" : $base-font-size * 2.4,
        "xxl" : $base-font-size * 2.4,
        "xl" : $base-font-size * 2,
        "lg" : $base-font-size * 1.8,
        "md" : $base-font-size * 1.6,
        "sm" : $base-font-size * 1.4,
        "xs" : $base-font-size * 1.2,
        "macro" : $base-font-size,
        )
  )
);

// ======== generate utility classes ===========

/* 
   - This section contains utilities for padding
   - includes: padding, padding-left, padding-right, padding-top, padding-bottom, padding-x axis, padding-y axis
   - The sizing is implemented using rem but with px accuracy.
   - i.e if you want to give a padding of 30px, you can use p-30 which is 30px but converted to rem on background
 
*/

// padding using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "padding": (
    "prefix": "p",
    "values": (
      #{$i}: math.div(($base-padding * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// padding-left using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "padding-left": (
    "prefix": "pl",
    "values": (
      #{$i}: math.div(($base-padding * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// padding-right using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "padding-right": (
    "prefix": "pr",
    "values": (
      #{$i}: math.div(($base-padding * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// padding-top using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "padding-top": (
    "prefix": "pt",
    "values": (
      #{$i}: math.div(($base-padding * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// padding-bottom using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "padding-bottom": (
    "prefix": "pb",
    "values": (
      #{$i}: math.div(($base-padding * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

//padding for both left and right (padding-x)
@for $i from 0 through 72 {
  .p-x {
    padding-left: math.div(($base-padding * $i), 10) + rem;
    padding-right: math.div(($base-padding * $i), 10) + rem;
  }
}

//padding for both top and bottom (padding-y)
@for $i from 0 through 72 {
  .p-y {
    padding-top: math.div(($base-padding * $i), 10) + rem;
    padding-bottom: math.div(($base-padding * $i), 10) + rem;
  }
}

//padding auto (padding-auto)
  .p-auto {
    padding: auto;
  };



//loop through and generate the decimal classes - padding
  @for $i from 0 through 72 {
    @for $j from 0 through 9 {
    //create the object properties from 1 to 72
   $util :(
     "padding": (
      "prefix": "p",
      "values": (
        #{$i}: math.div(($base-padding * $i), 10)  ,
        ),
    ),
   );

    //generate the decimal classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
   
          .#{$prefix}-#{$i}-#{$j}{
            #{$property} :  #{$base-padding * $i + math.div($j, 10)};
          }
  
        }
    
    }}

// ===== end of utilities for padding ==== 


/* 
   - This section contains utilities for margin
   - includes: margin, margin-left, margin-right, margin-top, margin-bottom, margin-x axis, margin-y axis
   - The sizing is implemented using rem but with px accuracy.
   - i.e if you want to give a margin of 30px, you can use m-30 which is 30px but converted to rem on background
 
*/

// margin using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "margin": (
    "prefix": "m",
    "values": (
      #{$i}: math.div(($base-margin * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// margin-left using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "margin-left": (
    "prefix": "ml",
    "values": (
      #{$i}: math.div(($base-margin * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// margin-right using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "margin-right": (
    "prefix": "mr",
    "values": (
      #{$i}: math.div(($base-margin * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// margin-top using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "margin-top": (
    "prefix": "mt",
    "values": (
      #{$i}: math.div(($base-margin * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

// margin-bottom using whole numbers
@for $i from 0 through 72 {
  //create the object properties from 1 to 72
 $util :(
   "margin-bottom": (
    "prefix": "mb",
    "values": (
      #{$i}: math.div(($base-margin * $i), 10)  ,
    ),
  ),
 );

// loop through and generate the classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
  
      @each $k, $v in $values {
          @if($k == "default"){
              .#{$prefix}{
                  #{$property} : $v;
              }
          } @else {
              .#{$prefix}-#{$k}{
                  #{$property} : $v;
              
          }
      }
    }
  };
  
  }

//margin for both left and right (margin-x)
@for $i from 0 through 72 {
  .m-x {
    margin-left: math.div(($base-margin * $i), 10) + rem;
    margin-right: math.div(($base-margin * $i), 10) + rem;
  }
}

//margin for both top and bottom (margin-y)
@for $i from 0 through 72 {
  .m-y {
    margin-top: math.div(($base-margin * $i), 10) + rem;
    margin-bottom: math.div(($base-margin * $i), 10) + rem;
  }
}

//margin auto (margin-auto)
  .m-auto {
    margin: auto;
  };



//loop through and generate the decimal classes - margin
  @for $i from 0 through 72 {
    @for $j from 0 through 9 {
    //create the object properties from 1 to 72
   $util :(
     "margin": (
      "prefix": "m",
      "values": (
        #{$i}: math.div(($base-margin * $i), 10)  ,
        ),
    ),
   );

    //generate the decimal classes
    @each $property, $map in $util {
      $prefix: map-get($map, "prefix");
      $values: map-get($map, "values");
   
          .#{$prefix}-#{$i}-#{$j}{
            #{$property} :  #{$base-margin * $i + math.div($j, 10)};
          }
  
        }
    
    }}

// ===== end of utilities for margin ==== 




/* 
   - This section contains general utilities defined at the $utilities variable
   - includes: padding, margin, text, display, borders & radius, alignments and others.
   - The sizing is implemented using rem but with px accuracy.
   - i.e if you want to give a padding of 30px, you can use p-30 which is 30px but converted to rem on background
 
*/

@each $property, $map in $utilities {
    $prefix: map-get($map, "prefix");
    $values: map-get($map, "values");

    @each $k, $v in $values {
        @if($k == "default"){
            .#{$prefix}{
                #{$property} : $v;
            }
        } @else {
            .#{$prefix}-#{$k}{
                #{$property} : $v;
            }
        }}
    };




  
    //flex related
    @for $i from 0 to 50 {
      .gap-#{$i}{
        gap: math.div($i, 10) + rem;
      }
    }

    .center {
      justify-content: center;
      align-items: center;
    }

    // ==== width ====
    @for $i from 0 to 2000 {
      .w-#{$i}{
        width: math.div($i, 10) + rem;
      }
    }

    @for $i from 0 to 100 {
      .wp-#{$i}{
        width: percentage(math.div($i, 100));
      }
    }

    @for $i from 0 to 101 {
      .wv-#{$i}{
        width: $i + vw;
      }
    }

     // ==== height ====
     @for $i from 0 to 2000 {
      .h-#{$i}{
        height: math.div($i, 10) + rem;
      }
    }

    // ===== height in percentage =====
    @for $i from 0 to 100 {
      .hp-#{$i}{
        height: percentage(math.div($i, 100));
      }
    }

    // ===== height in view width =====

    @for $i from 0 to 101 {
      .hv-#{$i}{
        height: $i + vw;
      }
    }
    

    // font-related-utilities
    @each $v in $font-weight {
      .font-#{$v}{
        font-weight: $v;
      }
    }
    

   // box shadows
    $shadow: (
    "xs": (0px 3px 4px -5px rgba(51, 51, 51, 0.03), 0px 1px 2px rgba(51, 51, 51, 0.05)),
    "s" : (0px 3px 4px rgba(51, 51, 51, 0.04), 0px 0px 2px rgba(51, 51, 51, 0.02)),
    "a" : (0px 32px 41px -23px rgba(51, 51, 51, 0.07), 0px 2px 6px rgba(51, 51, 51, 0.06)),
   );

   @each $k, $v in $shadow {
    .shadow-#{$k} {
      box-shadow : $v
    }
   }

   // related to display
   .flex {
    display: flex;
   }

   //border related utilities

     //loop through and generate the decimal classes
  @for $i from 1 through 10 {
    @for $j from 0 through 9 {
    //create the object properties from 1 to 10
    
    //normal border 
    @if($j == 0){
      @if($i == 1){
        @each $k, $v in $border-colors {
          .border-#{$k} {
            border: $i + px solid $v ;
          }}
      }
      @each $k, $v in $border-colors {
        .border-#{$k}-#{$i} {
          border: $i + px solid $v ;
        }
      }
    } @else {
      @each $k, $v in $border-colors {
        .border-#{$k}-#{$i}-#{$j} {
          border: $i + math.div($j, 10) + px solid $v ;
        }
      }
    }
 

    //border-top
    @if($j == 0){
      @if($i == 1){
        @each $k, $v in $border-colors {
          .border-t-#{$k} {
            border-top: $i + px solid $v ;
          }}
      }
      @each $k, $v in $border-colors {
        .border-t-#{$k}-#{$i} {
          border-top: $i + px solid $v ;
        }
      }
    } @else {
    @each $k, $v in $border-colors {
      .border-t-#{$k}-#{$i}-#{$j} {
        border-top: $i + math.div($j, 10) + px solid $v ;
      }
    }}

    //border-bottom
    @if($j == 0){
      @if($i == 1){
        @each $k, $v in $border-colors {
          .border-b-#{$k} {
            border-bottom: $i + px solid $v ;
          }}
      }
      @each $k, $v in $border-colors {
        .border-b-#{$k}-#{$i} {
          border-bottom: $i + px solid $v ;
        }
      }
    } @else {
    @each $k, $v in $border-colors {
      .border-b-#{$k}-#{$i}-#{$j} {
        border-bottom: $i + math.div($j, 10) + px solid $v ;
      }
    }}

    //border-left
    @if($j == 0){
      @if($i == 1){
        @each $k, $v in $border-colors {
          .border-l-#{$k} {
            border-left: $i + px solid $v ;
          }}
      }
      @each $k, $v in $border-colors {
        .border-l-#{$k}-#{$i} {
          border-left: $i + px solid $v ;
        }
      }
    } @else {
    @each $k, $v in $border-colors {
      .border-l-#{$k}-#{$i}-#{$j} {
        border-left: $i + math.div($j, 10) + px solid $v ;
      }
    }}

    //border-right
    @if($j == 0){
      @if($i == 1){
        @each $k, $v in $border-colors {
          .border-r-#{$k} {
            border-right: $i + px solid $v ;
          }}
      }
      @each $k, $v in $border-colors {
        .border-r-#{$k}-#{$i} {
          border-right: $i + px solid $v ;
        }
      }
    } @else {
    @each $k, $v in $border-colors {
      .border-r-#{$k}-#{$i}-#{$j} {
        border-right: $i + math.div($j, 10) + px solid $v ;
      }}
    }
    }}
   

// animations 
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fadeIn {
  animation-name: fadeIn;
  animation-duration: 1s;
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0);
  }
}

.slideInRight {
  animation-name: slideInRight;
  animation-duration: 1s;
}


//transitions
.transition-fast {
  transition: all 0.2s ease-in-out;
}

.transition-normal {
  transition: all 0.5s ease-in-out;
}

.transition-slow {
  transition: all 1s ease-in-out;
}


// ====== end of general $utilities ======
